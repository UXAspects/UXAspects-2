(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"0CEg":function(n,a){n.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-facet-header</span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Authors<span class="token punctuation">"</span></span> <span class="token attr-name">[(expanded)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expanded<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-facet-header</span><span class="token punctuation">></span></span>',example:'<ux-facet-header header="Authors" [(expanded)]="expanded"></ux-facet-header>'}},"0xY8":function(n,a){n.exports={snippet:'<span class="token selector">.sample-facet-checkbox-container</span> <span class="token punctuation">{</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.sample-facet-checkbox-container .sample-facet-checkbox</span> <span class="token punctuation">{</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',example:".sample-facet-checkbox-container {\n    padding: 10px;\n}\n\n.sample-facet-checkbox-container .sample-facet-checkbox {\n    display: block;\n}"}},"5fXC":function(n,a){n.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Facet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'chance\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable<span class="token punctuation">,</span> Observer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'rxjs\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    selector<span class="token operator">:</span> <span class="token string">\'app\'</span><span class="token punctuation">,</span>\n    templateUrl<span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n\n    facets<span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Facet<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>\n    suggestions<span class="token operator">:</span> Facet<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    query<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    users<span class="token operator">:</span> Facet<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// generate random facet data</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Facet</span><span class="token punctuation">(</span>chance<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> chance<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> min<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// sort the users alphabetically</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">userOne<span class="token punctuation">,</span> userTwo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>userOne<span class="token punctuation">.</span>title <span class="token operator">&lt;</span> userTwo<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>userOne<span class="token punctuation">.</span>title <span class="token operator">></span> userTwo<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// present the top 6 items as suggestions</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>suggestions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Create an observable which can be used for fetching data from server</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>facets <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer<span class="token operator">:</span> Observer<span class="token operator">&lt;</span>Facet<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// simulate server request</span>\n            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n                <span class="token comment">// return list of filtered users from "server"</span>\n                observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span>\n                    user<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>\n                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">750</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',example:"import { Component } from '@angular/core';\nimport { Facet } from '@ux-aspects/ux-aspects';\nimport 'chance';\nimport { Observable, Observer } from 'rxjs';\n\n@Component({\n    selector: 'app',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n\n    facets: Observable<Facet[]>;\n    suggestions: Facet[] = [];\n    query: string = '';\n    users: Facet[] = [];\n\n    constructor() {\n\n        // generate random facet data\n        for (let idx = 0; idx < 1000; idx++) {\n            this.users.push(new Facet(chance.name(), null, chance.integer({ min: 0, max: 100 })));\n        }\n\n        // sort the users alphabetically\n        this.users.sort((userOne, userTwo) => {\n            if (userOne.title < userTwo.title) {\n                return -1;\n            }\n\n            if (userOne.title > userTwo.title) {\n                return 1;\n            }\n\n            return 0;\n        });\n\n        // present the top 6 items as suggestions\n        this.suggestions = this.users.slice(0, 6);\n\n        // Create an observable which can be used for fetching data from server\n        this.facets = Observable.create((observer: Observer<Facet[]>) => {\n            // simulate server request\n            setTimeout(() => {\n\n                // return list of filtered users from \"server\"\n                observer.next(this.users.filter(user =>\n                    user.title.toLowerCase().indexOf(this.query.toLowerCase()) !== -1\n                ));\n            }, 750);\n        });\n\n    }\n}"}},"67KT":function(n,a,s){var t={"./app.html":"dSNF","./app.ts":"V926"};function e(n){var a=p(n);return s(a)}function p(n){if(!s.o(t,n)){var a=new Error("Cannot find module '"+n+"'");throw a.code="MODULE_NOT_FOUND",a}return t[n]}e.keys=function(){return Object.keys(t)},e.resolve=p,n.exports=e,e.id="67KT"},"6ExZ":function(n,a,s){var t={"./app.html":"TUfE","./app.ts":"SJPo","./custom-button.snippet.html":"CnVY"};function e(n){var a=p(n);return s(a)}function p(n){if(!s.o(t,n)){var a=new Error("Cannot find module '"+n+"'");throw a.code="MODULE_NOT_FOUND",a}return t[n]}e.keys=function(){return Object.keys(t)},e.resolve=p,n.exports=e,e.id="6ExZ"},CnVY:function(n,a){n.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-facet-container</span> <span class="token attr-name">#container</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">*uxFacetClearButton</span>\n        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-link button-secondary<span class="token punctuation">"</span></span>\n        <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container.deselectAllFacets()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        Clear All\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-facet-container</span><span class="token punctuation">></span></span>'}},DfpY:function(n,a){n.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    selector<span class="token operator">:</span> <span class="token string">\'app\'</span><span class="token punctuation">,</span>\n    templateUrl<span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>',example:"import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent { }"}},DlpL:function(n,a){n.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-facet-container</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-custom-facet-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-custom-facet-component</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-facet-container</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<div class="row">\n    <div class="col-md-12">\n        <ux-facet-container>\n            <my-custom-facet-component></my-custom-facet-component>\n        </ux-facet-container>\n    </div>\n</div>'}},HkS4:function(n,a,s){var t={"./app.html":"DlpL","./app.ts":"DfpY","./facet-component.css":"0xY8","./facet-component.html":"pWfX","./facet-component.ts":"kN9H","./header.html":"0CEg"};function e(n){var a=p(n);return s(a)}function p(n){if(!s.o(t,n)){var a=new Error("Cannot find module '"+n+"'");throw a.code="MODULE_NOT_FOUND",a}return t[n]}e.keys=function(){return Object.keys(t)},e.resolve=p,n.exports=e,e.id="HkS4"},PAYQ:function(n,a,s){var t={"./app.html":"aOGQ","./app.ts":"5fXC"};function e(n){var a=p(n);return s(a)}function p(n){if(!s.o(t,n)){var a=new Error("Cannot find module '"+n+"'");throw a.code="MODULE_NOT_FOUND",a}return t[n]}e.keys=function(){return Object.keys(t)},e.resolve=p,n.exports=e,e.id="PAYQ"},RGdZ:function(n,a,s){"use strict";s.r(a);var t=s("Valr"),e=s("DUip"),p=s("7Q8i"),c=s("XtaT"),o=s("T/2f"),l=s("YZ8U"),u=(s("nmfD"),s("AVdU")),i=s("yHOM"),r=s("TYT/"),k=s("+gXg"),d=s("2RDK"),f=s("COk8"),m=s("VnD/"),h=s("ny24"),b=s("K9Ia");function y(n,a){if(1&n){var s=r.bc();r.ac(0,"ux-checkbox",4),r.ic("valueChange",(function(n){r.Hc(s);var t=a.$implicit;return r.mc(2).updateFacet(t,n)})),r.Sc(1),r.Zb()}if(2&n){var t=a.$implicit;r.tc("value",t.data.checked),r.Cb(1),r.Uc("\n        ",t.title,"\n    ")}}function S(n,a){if(1&n&&(r.ac(0,"div",2),r.Sc(1,"\n    "),r.Qc(2,y,2,2,"ux-checkbox",3),r.Sc(3,"\n"),r.Zb()),2&n){var s=r.mc();r.Cb(2),r.tc("ngForOf",s.facets)}}var g,v=function(){function n(n){this._facetService=n,this.expanded=!0,this.facets=[new p.S("Components",{checked:!1}),new p.S("Charts",{checked:!1}),new p.S("CSS",{checked:!1})],this._onDestroy=new b.a}return n.prototype.ngOnInit=function(){var n=this;this._facetService.events$.pipe(Object(m.a)((function(n){return n instanceof p.V})),Object(h.a)(this._onDestroy)).subscribe((function(n){n.facet.data.checked=!1})),this._facetService.events$.pipe(Object(m.a)((function(n){return n instanceof p.W})),Object(h.a)(this._onDestroy)).subscribe((function(){n.facets.forEach((function(n){return n.data.checked=!1}))}))},n.prototype.ngOnDestroy=function(){this._onDestroy.next(),this._onDestroy.complete()},n.prototype.updateFacet=function(n,a){n.data.checked=a,!0!==a||this._facetService.isSelected(n)||this._facetService.select(n),!1===a&&this._facetService.isSelected(n)&&this._facetService.deselect(n)},n.\u0275fac=function(a){return new(a||n)(r.Ub(p.Y))},n.\u0275cmp=r.Ob({type:n,selectors:[["my-custom-facet-component"]],decls:3,vars:2,consts:[["header","Category",3,"expanded","expandedChange"],["class","sample-facet-checkbox-container checkbox-container",4,"ngIf"],[1,"sample-facet-checkbox-container","checkbox-container"],["class","sample-facet-checkbox",3,"value","valueChange",4,"ngFor","ngForOf"],[1,"sample-facet-checkbox",3,"value","valueChange"]],template:function(n,a){1&n&&(r.ac(0,"ux-facet-header",0),r.ic("expandedChange",(function(n){return a.expanded=n})),r.Zb(),r.Sc(1,"\n\n"),r.Qc(2,S,4,1,"div",1)),2&n&&(r.tc("expanded",a.expanded),r.Cb(2),r.tc("ngIf",a.expanded))},directives:[p.X,t.t,t.s,p.n],styles:[".sample-facet-checkbox-container[_ngcontent-%COMP%]{padding:10px}.sample-facet-checkbox-container[_ngcontent-%COMP%]   .sample-facet-checkbox[_ngcontent-%COMP%]{display:block}"]}),n}(),w=(g=function(n,a){return(g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,a){n.__proto__=a}||function(n,a){for(var s in a)a.hasOwnProperty(s)&&(n[s]=a[s])})(n,a)},function(n,a){function s(){this.constructor=n}g(n,a),n.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}),x=function(n){function a(){var a=n.call(this,s("HkS4"))||this;return a.playground={files:{"app.component.ts":a.snippets.raw.appTs,"app.component.html":a.snippets.raw.appHtml,"facet-component.component.html":a.snippets.raw.facetComponentHtml,"facet-component.component.css":a.snippets.raw.facetComponentCss,"facet-component.component.ts":a.snippets.raw.facetComponentTs},modules:[{imports:["FacetsModule","CheckboxModule"],library:"@ux-aspects/ux-aspects"},{imports:["SampleCustomFacetComponent"],library:"./facet-component.component",declaration:!0}]},a}return w(a,n),a.\u0275fac=function(n){return new(n||a)},a.\u0275cmp=r.Ob({type:a,selectors:[["uxd-components-custom-facet-component"]],features:[r.zb],decls:154,vars:6,consts:[["tableTitle","Inputs"],["uxd-api-property","","name","header","type","string"],["uxd-api-property","","name","canExpand","type","boolean","defaultValue","true"],["uxd-api-property","","name","expanded","type","boolean"],["tableTitle","Outputs"],["uxd-api-property","","name","expandedChange","type","boolean"],["language","html",3,"content"],["tableTitle","Functions"],["uxd-api-property","","name","select","args","Facet"],["uxd-api-property","","name","deselect","args","Facet"],["uxd-api-property","","name","deselectAll"],["uxd-api-property","","name","toggle","args","Facet"],["uxd-api-property","","name","isSelected","args","Facet","returns","boolean"],["tableTitle","Observables"],["uxd-api-property","","name","facets$","type","BehaviorSubject<Facet[]>"],["uxd-api-property","","name","events$","type","Subject<FacetEvent>"],[1,"row"],[1,"col-md-12"],[3,"minimal"],["heading","HTML"],["heading","Facet HTML"],["heading","Facet TypeScript"],["language","javascript",3,"content"],["heading","Facet CSS"],["language","css",3,"content"]],template:function(n,a){1&n&&(r.ac(0,"p"),r.Sc(1,"\n    As part of UX Aspects we provide two common prebuilt Facet list components, however you may require different facet components\n    specifically for your application. We provide some useful classes for you to use to make the process of creating your\n    own facet component simple while ensuring that it will work well with Facet Containers automatically.\n"),r.Zb(),r.Sc(2,"\n\n"),r.ac(3,"h4"),r.Sc(4,"Facet Header"),r.Zb(),r.Sc(5,"\n\n"),r.ac(6,"p"),r.Sc(7,"\n    First we recommend each facet component has a header, to identify what kind of type of filtering it will provide. It also\n    allows a user to easily collapse and expand the component. We provide a header component for you to use as part of the\n    "),r.ac(8,"code"),r.Sc(9,"FacetsModule"),r.Zb(),r.Sc(10,". It can be added using the "),r.ac(11,"code"),r.Sc(12,"ux-facet-header"),r.Zb(),r.Sc(13," selector.\n"),r.Zb(),r.Sc(14,"\n\n"),r.ac(15,"p"),r.Sc(16,"The Facet Header component can use the following attributes to customize the behavior and appearance:"),r.Zb(),r.Sc(17,"\n\n"),r.ac(18,"uxd-api-properties",0),r.Sc(19,"\n    "),r.ac(20,"tr",1),r.Sc(21,"\n        Defines the text to display in the header.\n    "),r.Zb(),r.Sc(22,"\n    "),r.ac(23,"tr",2),r.Sc(24,"\n        Defines whether or not clicking on the header will toggle the expanded state.\n    "),r.Zb(),r.Sc(25,"\n    "),r.ac(26,"tr",3),r.Sc(27,"\n        Can be used to set the initial expanded.\n    "),r.Zb(),r.Sc(28,"\n"),r.Zb(),r.Sc(29,"\n\n"),r.ac(30,"uxd-api-properties",4),r.Sc(31,"\n    "),r.ac(32,"tr",5),r.Sc(33,"\n        If two-way binding is used it will be updated when the expanded state changes.\n    "),r.Zb(),r.Sc(34,"\n"),r.Zb(),r.Sc(35,"\n\n"),r.ac(36,"p"),r.Sc(37,"The following code demonstrates how the header can be used:"),r.Zb(),r.Sc(38,"\n\n"),r.Vb(39,"uxd-snippet",6),r.Sc(40,"\n\n"),r.Vb(41,"hr"),r.Sc(42,"\n\n"),r.ac(43,"h4"),r.Sc(44,"Facet Service"),r.Zb(),r.Sc(45,"\n\n"),r.ac(46,"p"),r.Sc(47,"\n    Your custom facet component should inject the "),r.ac(48,"code"),r.Sc(49,"FacetService"),r.Zb(),r.Sc(50," class. This service will provide\n    you with the following:\n"),r.Zb(),r.Sc(51,"\n\n"),r.ac(52,"uxd-api-properties",7),r.Sc(53,"\n    "),r.ac(54,"tr",8),r.Sc(55,"\n        Will select the facet and update the selected values in the facet container.\n    "),r.Zb(),r.Sc(56,"\n    "),r.ac(57,"tr",9),r.Sc(58,"\n        Will deselect the facet and update the selected values in the facet container.\n    "),r.Zb(),r.Sc(59,"\n    "),r.ac(60,"tr",10),r.Sc(61,"\n        Will deselect all facets associated with this component and update the selected values\n        in the facet container.\n    "),r.Zb(),r.Sc(62,"\n    "),r.ac(63,"tr",11),r.Sc(64,"\n        If the facet passed to this function is currently selected it will be deselected.\n        If the facet is currently not selected it will be selected. This will update the selected\n        values in the facet container.\n    "),r.Zb(),r.Sc(65,"\n    "),r.ac(66,"tr",12),r.Sc(67,"\n        Will return a "),r.ac(68,"code"),r.Sc(69,"true"),r.Zb(),r.Sc(70," if the facet passed to the function is currently selected,\n        otherwise will return false.\n    "),r.Zb(),r.Sc(71,"\n"),r.Zb(),r.Sc(72,"\n\n"),r.ac(73,"uxd-api-properties",13),r.Sc(74,"\n    "),r.ac(75,"tr",14),r.Sc(76,"\n        This observable contains a list of the currently selected facets.\n    "),r.Zb(),r.Sc(77,"\n    "),r.ac(78,"tr",15),r.Sc(79,"\n        This observable will emit a "),r.ac(80,"code"),r.Sc(81,"FacetEvent"),r.Zb(),r.Sc(82," any time a selection or deselection occurs.\n        There are several types of "),r.ac(83,"code"),r.Sc(84,"FacetEvent"),r.Zb(),r.Sc(85,":\n\n        "),r.ac(86,"ul"),r.Sc(87,"\n            "),r.ac(88,"li"),r.ac(89,"code"),r.Sc(90,"FacetSelect"),r.Zb(),r.Sc(91," - Indicates a facet has been selected. It has a "),r.ac(92,"code"),r.Sc(93,"facet"),r.Zb(),r.Sc(94," property containing the affected facet."),r.Zb(),r.Sc(95,"\n            "),r.ac(96,"li"),r.ac(97,"code"),r.Sc(98,"FacetDeselect"),r.Zb(),r.Sc(99," - Indicates a facet has been deselected. It has a "),r.ac(100,"code"),r.Sc(101,"facet"),r.Zb(),r.Sc(102," property containing the affected facet."),r.Zb(),r.Sc(103,"\n            "),r.ac(104,"li"),r.ac(105,"code"),r.Sc(106,"FacetDeselectAll"),r.Zb(),r.Sc(107," - Indicates all facets have been deselected."),r.Zb(),r.Sc(108,"\n        "),r.Zb(),r.Sc(109,"\n    "),r.Zb(),r.Sc(110,"\n"),r.Zb(),r.Sc(111,"\n\n"),r.Vb(112,"hr"),r.Sc(113,"\n\n"),r.ac(114,"h4"),r.Sc(115,"Sample Custom Facet Component"),r.Zb(),r.Sc(116,"\n\n"),r.ac(117,"div",16),r.Sc(118,"\n    "),r.ac(119,"div",17),r.Sc(120,"\n        "),r.ac(121,"ux-facet-container"),r.Sc(122,"\n            "),r.Vb(123,"my-custom-facet-component"),r.Sc(124,"\n        "),r.Zb(),r.Sc(125,"\n    "),r.Zb(),r.Sc(126,"\n"),r.Zb(),r.Sc(127,"\n\n"),r.ac(128,"p"),r.Sc(129,"The following code can be used to create the example above:"),r.Zb(),r.Sc(130,"\n\n"),r.ac(131,"ux-tabset",18),r.Sc(132,"\n    "),r.ac(133,"ux-tab",19),r.Sc(134,"\n        "),r.Vb(135,"uxd-snippet",6),r.Sc(136,"\n    "),r.Zb(),r.Sc(137,"\n\n    "),r.ac(138,"ux-tab",20),r.Sc(139,"\n        "),r.Vb(140,"uxd-snippet",6),r.Sc(141,"\n    "),r.Zb(),r.Sc(142,"\n\n    "),r.ac(143,"ux-tab",21),r.Sc(144,"\n        "),r.Vb(145,"uxd-snippet",22),r.Sc(146,"\n    "),r.Zb(),r.Sc(147,"\n\n    "),r.ac(148,"ux-tab",23),r.Sc(149,"\n        "),r.Vb(150,"uxd-snippet",24),r.Sc(151,"\n    "),r.Zb(),r.Sc(152,"\n"),r.Zb(),r.Sc(153,"\n")),2&n&&(r.Cb(39),r.tc("content",a.snippets.compiled.headerHtml),r.Cb(92),r.tc("minimal",!1),r.Cb(4),r.tc("content",a.snippets.compiled.appHtml),r.Cb(5),r.tc("content",a.snippets.compiled.facetComponentHtml),r.Cb(5),r.tc("content",a.snippets.compiled.facetComponentTs),r.Cb(5),r.tc("content",a.snippets.compiled.facetComponentCss))},directives:[k.a,d.a,f.a,p.U,v,p.Kd,p.Fd],encapsulation:2}),a=function(n,a,s,t){var e,p=arguments.length,c=p<3?a:null===t?t=Object.getOwnPropertyDescriptor(a,s):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(n,a,s,t);else for(var o=n.length-1;o>=0;o--)(e=n[o])&&(c=(p<3?e(c):p>3?e(a,s,c):e(a,s))||c);return p>3&&c&&Object.defineProperty(a,s,c),c}([Object(i.a)("ComponentsCustomFacetComponent")],a)}(u.a),F=function(){var n=function(a,s){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,a){n.__proto__=a}||function(n,a){for(var s in a)a.hasOwnProperty(s)&&(n[s]=a[s])})(a,s)};return function(a,s){function t(){this.constructor=a}n(a,s),a.prototype=null===s?Object.create(s):(t.prototype=s.prototype,new t)}}(),Z=function(n){function a(){var a=n.call(this,s("67KT"))||this;a.facets=[],a.playground={files:{"app.component.ts":a.snippets.raw.appTs,"app.component.html":a.snippets.raw.appHtml},modules:[{imports:["FacetsModule"],library:"@ux-aspects/ux-aspects"}]};for(var t=0;t<30;t++)a.facets.push(new p.S(chance.name(),null,chance.integer({min:0,max:100})));return a.facets.sort((function(n,a){return n.title<a.title?-1:n.title>a.title?1:0})),a}return F(a,n),a.\u0275fac=function(n){return new(n||a)},a.\u0275cmp=r.Ob({type:a,selectors:[["uxd-components-facet-check-list"]],features:[r.zb],decls:91,vars:4,consts:[[1,"row"],[1,"col-md-12"],["header","Authors",3,"facets"],["tableTitle","Inputs"],["uxd-api-property","","name","facets","type","Facet[]"],["uxd-api-property","","name","selected","type","Facet[]"],["uxd-api-property","","name","header","type","string"],["uxd-api-property","","name","scrollbar","type","boolean","defaultValue","true"],["uxd-api-property","","name","expanded","type","boolean","defaultValue","true"],["uxd-api-property","","name","simplified","type","boolean","defaultValue","false"],["tableTitle","Outputs"],["uxd-api-property","","name","selectedChange","type","Facet[]"],["uxd-api-property","","name","events","type","FacetEvent"],[3,"minimal"],["heading","HTML"],["language","html",3,"content"],["heading","TypeScript"],["language","javascript",3,"content"]],template:function(n,a){1&n&&(r.ac(0,"div",0),r.Sc(1,"\n    "),r.ac(2,"div",1),r.Sc(3,"\n        "),r.ac(4,"ux-facet-container"),r.Sc(5,"\n            "),r.Vb(6,"ux-facet-check-list",2),r.Sc(7,"\n        "),r.Zb(),r.Sc(8,"\n    "),r.Zb(),r.Sc(9,"\n"),r.Zb(),r.Sc(10,"\n\n"),r.Vb(11,"hr"),r.Sc(12,"\n\n"),r.ac(13,"p"),r.Sc(14,"\n    The Facet Check List component can be used to display a list of Facets that can be selected or deselected to provide the\n    user with filtering capabilities. This component is designed to be placed within the Facet Container component.\n"),r.Zb(),r.Sc(15,"\n\n"),r.ac(16,"p"),r.Sc(17,"\n    To add a Facet Check List component to your application you need to import the "),r.ac(18,"code"),r.Sc(19,"FacetsModule"),r.Zb(),r.Sc(20," which allows\n    the use of the "),r.ac(21,"code"),r.Sc(22,"ux-facet-check-list"),r.Zb(),r.Sc(23," component.\n"),r.Zb(),r.Sc(24,"\n\n"),r.ac(25,"p"),r.Sc(26,"The following attributes can be used to customise the behavior of the component:"),r.Zb(),r.Sc(27,"\n\n"),r.ac(28,"uxd-api-properties",3),r.Sc(29,"\n    "),r.ac(30,"tr",4),r.Sc(31,"\n        Defines the complete list of facets that can be selected.\n    "),r.Zb(),r.Sc(32,"\n    "),r.ac(33,"tr",5),r.Sc(34,"\n        This will allow you to define an initial set of selected facets.\n    "),r.Zb(),r.Sc(35,"\n    "),r.ac(36,"tr",6),r.Sc(37,"\n        Defines the text displayed at the top of the Facet Check List.\n    "),r.Zb(),r.Sc(38,"\n    "),r.ac(39,"tr",7),r.Sc(40,"\n        If "),r.ac(41,"code"),r.Sc(42,"false"),r.Zb(),r.Sc(43," the list will grow to display all possible facets. \n        If "),r.ac(44,"code"),r.Sc(45,"true"),r.Zb(),r.Sc(46," a scrollbar will appear to prevent the list from growing too large.\n    "),r.Zb(),r.Sc(47,"\n    "),r.ac(48,"tr",8),r.Sc(49,"\n        Defines whether or not the Facet Check List should be initially expanded or not.\n    "),r.Zb(),r.Sc(50,"\n    "),r.ac(51,"tr",9),r.Sc(52,"\n        Defines whether or not the checkboxes will appear in simplified form.\n    "),r.Zb(),r.Sc(53,"\n"),r.Zb(),r.Sc(54,"\n\n"),r.ac(55,"uxd-api-properties",10),r.Sc(56,"\n    "),r.ac(57,"tr",11),r.Sc(58,"\n        If two-way binding is used this array will get updated any time the selected facets change.\n    "),r.Zb(),r.Sc(59,"\n    "),r.ac(60,"tr",12),r.Sc(61,"\n        This will be triggered when a facet is selected, deselected or all facets are deselected. The event will be an\n                instance of either "),r.ac(62,"code"),r.Sc(63,"FacetSelect"),r.Zb(),r.Sc(64,", "),r.ac(65,"code"),r.Sc(66,"FacetDeselect"),r.Zb(),r.Sc(67," or "),r.ac(68,"code"),r.Sc(69,"FacetDeselectAll"),r.Zb(),r.Sc(70," \n                and will contain the facet being selected or deselected in a "),r.ac(71,"code"),r.Sc(72,"facet"),r.Zb(),r.Sc(73," property (deselect all will not contain affected facets).\n    "),r.Zb(),r.Sc(74,"\n"),r.Zb(),r.Sc(75,"\n\n"),r.ac(76,"p"),r.Sc(77,"The following code will produce the example shown above:"),r.Zb(),r.Sc(78,"\n\n"),r.ac(79,"ux-tabset",13),r.Sc(80,"\n\n    "),r.ac(81,"ux-tab",14),r.Sc(82,"\n        "),r.Vb(83,"uxd-snippet",15),r.Sc(84,"\n    "),r.Zb(),r.Sc(85,"\n\n    "),r.ac(86,"ux-tab",16),r.Sc(87,"\n        "),r.Vb(88,"uxd-snippet",17),r.Sc(89,"\n    "),r.Zb(),r.Sc(90,"\n\n"),r.Zb()),2&n&&(r.Cb(6),r.tc("facets",a.facets),r.Cb(73),r.tc("minimal",!1),r.Cb(4),r.tc("content",a.snippets.compiled.appHtml),r.Cb(5),r.tc("content",a.snippets.compiled.appTs))},directives:[p.U,p.T,k.a,d.a,p.Kd,p.Fd,f.a],encapsulation:2}),a=function(n,a,s,t){var e,p=arguments.length,c=p<3?a:null===t?t=Object.getOwnPropertyDescriptor(a,s):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(n,a,s,t);else for(var o=n.length-1;o>=0;o--)(e=n[o])&&(c=(p<3?e(c):p>3?e(a,s,c):e(a,s))||c);return p>3&&c&&Object.defineProperty(a,s,c),c}([Object(i.a)("ComponentsFacetCheckListComponent")],a)}(u.a),C=function(){var n=function(a,s){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,a){n.__proto__=a}||function(n,a){for(var s in a)a.hasOwnProperty(s)&&(n[s]=a[s])})(a,s)};return function(a,s){function t(){this.constructor=a}n(a,s),a.prototype=null===s?Object.create(s):(t.prototype=s.prototype,new t)}}(),O=function(n){function a(){var a=n.call(this,s("6ExZ"))||this;return a.facets=[],a.allowReorder=!1,a.playground={files:{"app.component.ts":a.snippets.raw.appTs,"app.component.html":a.snippets.raw.appHtml},modules:[{imports:["FacetsModule","CheckboxModule"],library:"@ux-aspects/ux-aspects"}]},a}return C(a,n),a.prototype.addFacet=function(){this.facets.push(new p.S(chance.name(),{},chance.integer({min:0,max:100})))},a.\u0275fac=function(n){return new(n||a)},a.\u0275cmp=r.Ob({type:a,selectors:[["uxd-components-facet-container"]],features:[r.zb],decls:137,vars:7,consts:[[1,"row"],[1,"col-md-12"],[3,"facets","facetsReorderable","facetsChange"],[1,"btn","button-primary",3,"click"],[1,"m-t-md"],[3,"value","valueChange"],["tableTitle","Inputs"],["uxd-api-property","","name","facets","type","Facet[]"],["uxd-api-property","","name","header","type","string","defaultValue","Selected:"],["uxd-api-property","","name","clearTooltip","type","string","defaultValue","Clear All"],["uxd-api-property","","name","emptyText","type","string","defaultValue","No Items"],["uxd-api-property","","name","facetsReorderable","type","boolean","defaultValue","false"],["uxd-api-property","","name","clearAriaLabel","type","string"],["uxd-api-property","","name","deselectFacetAriaLabel","type","string"],["tableTitle","Outputs"],["uxd-api-property","","name","facetsChange","type","Facet[]"],["uxd-api-property","","name","events","type","FacetEvent"],["uxd-api-property","","name","title","type","string","required","true"],["uxd-api-property","","name","data","type","any"],["uxd-api-property","","name","count","type","number"],["uxd-api-property","","name","disabled","type","boolean"],["uxd-api-property","","name","id","type","string"],[3,"content"],[3,"minimal"],["heading","HTML"],["language","html",3,"content"],["heading","TypeScript"],["language","javascript",3,"content"]],template:function(n,a){1&n&&(r.ac(0,"div",0),r.Sc(1,"\n    "),r.ac(2,"div",1),r.Sc(3,"\n        "),r.ac(4,"ux-facet-container",2),r.ic("facetsChange",(function(n){return a.facets=n})),r.Zb(),r.Sc(5,"\n        "),r.Vb(6,"hr"),r.Sc(7,"\n        "),r.ac(8,"button",3),r.ic("click",(function(){return a.addFacet()})),r.Sc(9,"Add Facet"),r.Zb(),r.Sc(10,"\n\n        "),r.ac(11,"div",4),r.Sc(12,"\n            "),r.ac(13,"ux-checkbox",5),r.ic("valueChange",(function(n){return a.allowReorder=n})),r.Sc(14,"Allow reordering"),r.Zb(),r.Sc(15,"\n        "),r.Zb(),r.Sc(16,"\n    "),r.Zb(),r.Sc(17,"\n"),r.Zb(),r.Sc(18,"\n\n"),r.Vb(19,"hr"),r.Sc(20,"\n\n"),r.ac(21,"p"),r.Sc(22,"\n    Facets can be used to easily implement a way for users to filter a set of data, allowing them to apply and remove conditions.\n    Facet selection components are usually contained within a Facet Container component. A Facet Container provides an overall\n    view of all facets that are applied, and allows the user to quickly remove an individual facet, or all facets, without\n    having to go through each facet selection component.\n"),r.Zb(),r.Sc(23,"\n\n"),r.ac(24,"p"),r.Sc(25,"\n    To add a Facet Container component to your application you need to import the "),r.ac(26,"code"),r.Sc(27,"FacetsModule"),r.Zb(),r.Sc(28," which allows\n    the use of the "),r.ac(29,"code"),r.Sc(30,"ux-facet-container"),r.Zb(),r.Sc(31," component.\n"),r.Zb(),r.Sc(32,"\n\n"),r.ac(33,"p"),r.Sc(34,"The following attributes can be used to customise the behavior of the component:"),r.Zb(),r.Sc(35,"\n\n"),r.ac(36,"uxd-api-properties",6),r.Sc(37,"\n    "),r.ac(38,"tr",7),r.Sc(39,"\n        Allows a predefined set of Facets to be displayed.\n    "),r.Zb(),r.Sc(40,"\n    "),r.ac(41,"tr",8),r.Sc(42,"\n        Defines the text displayed at the top of the Facet Container.\n    "),r.Zb(),r.Sc(43,"\n    "),r.ac(44,"tr",9),r.Sc(45,"\n        Defines the text to display in the tooltip when hovering over the clear all button.\n    "),r.Zb(),r.Sc(46,"\n    "),r.ac(47,"tr",10),r.Sc(48,"\n        Defines the text to display when there are no selected facets.\n    "),r.Zb(),r.Sc(49,"\n    "),r.ac(50,"tr",11),r.Sc(51,"\n        Determines if the facets can be reordered.\n    "),r.Zb(),r.Sc(52,"\n    "),r.ac(53,"tr",12),r.Sc(54,"\n        Determines the aria-label for the clear all button.\n    "),r.Zb(),r.Sc(55,"\n    "),r.ac(56,"tr",13),r.Sc(57,"\n        Determines the aria-label for the deselect facet button.\n    "),r.Zb(),r.Sc(58,"\n"),r.Zb(),r.Sc(59,"\n\n"),r.ac(60,"uxd-api-properties",14),r.Sc(61,"\n    "),r.ac(62,"tr",15),r.Sc(63,"\n        If using two-way binding this array will update when the selected facets change.\n    "),r.Zb(),r.Sc(64,"\n    "),r.ac(65,"tr",16),r.Sc(66,"\n        This will be triggered when a facet is selected, deselected or all facets are deselected. The event will be an\n        instance of either "),r.ac(67,"code"),r.Sc(68,"FacetSelect"),r.Zb(),r.Sc(69,", "),r.ac(70,"code"),r.Sc(71,"FacetDeselect"),r.Zb(),r.Sc(72," or "),r.ac(73,"code"),r.Sc(74,"FacetDeselectAll"),r.Zb(),r.Sc(75,"\n        and will contain the facet being selected or deselected in a "),r.ac(76,"code"),r.Sc(77,"facet"),r.Zb(),r.Sc(78," property\n        (deselect all will not contain affected facets).\n    "),r.Zb(),r.Sc(79,"\n"),r.Zb(),r.Sc(80,"\n\n"),r.ac(81,"h4"),r.Sc(82,"Facet Object"),r.Zb(),r.Sc(83,"\n\n"),r.ac(84,"p"),r.Sc(85,"A facet object can contain the following properties:"),r.Zb(),r.Sc(86,"\n\n"),r.ac(87,"uxd-api-properties"),r.Sc(88,"\n    "),r.ac(89,"tr",17),r.Sc(90,"\n        This is the text that will be displayed when the facet is shown.\n    "),r.Zb(),r.Sc(91,"\n    "),r.ac(92,"tr",18),r.Sc(93,"\n        Allows custom data to be stored on the facet which can be used when performing any filtering.\n    "),r.Zb(),r.Sc(94,"\n    "),r.ac(95,"tr",19),r.Sc(96,"\n        Defines the number of items in the data set that match this facet. Facet selection components can display this if provided.\n    "),r.Zb(),r.Sc(97,"\n    "),r.ac(98,"tr",20),r.Sc(99,"\n        Defines if the facet can be selected. Some selection components may grey disabled options out, others may not display the item.\n    "),r.Zb(),r.Sc(100,"\n    "),r.ac(101,"tr",21),r.Sc(102,"\n        This can be useful if multiple facets may share the same title. An ID can be used to ensure each facet is unique.\n    "),r.Zb(),r.Sc(103,"\n"),r.Zb(),r.Sc(104,"\n\n"),r.ac(105,"p"),r.Sc(106,"These properties can be defined by passing the values to the constructor in the order listed above."),r.Zb(),r.Sc(107,"\n\n"),r.ac(108,"p"),r.Sc(109,'\n    To customize the "Clear All" button add the '),r.ac(110,"code"),r.Sc(111,"*uxFacetClearButton"),r.Zb(),r.Sc(112," structural directive to an element within the\n    "),r.ac(113,"code"),r.Sc(114,"ux-facet-container"),r.Zb(),r.Sc(115," element, e.g:\n"),r.Zb(),r.Sc(116,"\n\n"),r.Vb(117,"uxd-snippet",22),r.Sc(118,"\n\n"),r.Vb(119,"hr"),r.Sc(120,"\n\n"),r.ac(121,"p"),r.Sc(122,"The following code will produce the example shown above:"),r.Zb(),r.Sc(123,"\n\n"),r.ac(124,"ux-tabset",23),r.Sc(125,"\n\n    "),r.ac(126,"ux-tab",24),r.Sc(127,"\n        "),r.Vb(128,"uxd-snippet",25),r.Sc(129,"\n    "),r.Zb(),r.Sc(130,"\n\n    "),r.ac(131,"ux-tab",26),r.Sc(132,"\n        "),r.Vb(133,"uxd-snippet",27),r.Sc(134,"\n    "),r.Zb(),r.Sc(135,"\n\n"),r.Zb(),r.Sc(136,"\n")),2&n&&(r.Cb(4),r.tc("facets",a.facets)("facetsReorderable",a.allowReorder),r.Cb(9),r.tc("value",a.allowReorder),r.Cb(104),r.tc("content",a.snippets.compiled.customButtonSnippetHtml),r.Cb(7),r.tc("minimal",!1),r.Cb(4),r.tc("content",a.snippets.compiled.appHtml),r.Cb(5),r.tc("content",a.snippets.compiled.appTs))},directives:[p.U,p.N,p.n,k.a,d.a,f.a,p.Kd,p.Fd],encapsulation:2}),a=function(n,a,s,t){var e,p=arguments.length,c=p<3?a:null===t?t=Object.getOwnPropertyDescriptor(a,s):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(n,a,s,t);else for(var o=n.length-1;o>=0;o--)(e=n[o])&&(c=(p<3?e(c):p>3?e(a,s,c):e(a,s))||c);return p>3&&c&&Object.defineProperty(a,s,c),c}([Object(i.a)("ComponentsFacetContainerComponent")],a)}(u.a),T=s("6blF"),D=function(){var n=function(a,s){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,a){n.__proto__=a}||function(n,a){for(var s in a)a.hasOwnProperty(s)&&(n[s]=a[s])})(a,s)};return function(a,s){function t(){this.constructor=a}n(a,s),a.prototype=null===s?Object.create(s):(t.prototype=s.prototype,new t)}}(),_=function(){return{placeholder:"Find Author"}},A=function(n){function a(){var a=n.call(this,s("PAYQ"))||this;a.suggestions=[],a.query="",a.users=[],a.playground={files:{"app.component.ts":a.snippets.raw.appTs,"app.component.html":a.snippets.raw.appHtml},modules:[{imports:["FacetsModule"],library:"@ux-aspects/ux-aspects"}]};for(var t=0;t<1e3;t++)a.users.push(new p.S(chance.name(),null,chance.integer({min:0,max:100})));return a.users.sort((function(n,a){return n.title<a.title?-1:n.title>a.title?1:0})),a.suggestions=a.users.slice(0,6),a.facets=T.a.create((function(n){setTimeout((function(){n.next(a.users.filter((function(n){return-1!==n.title.toLowerCase().indexOf(a.query.toLowerCase())})))}),750)})),a}return D(a,n),a.\u0275fac=function(n){return new(n||a)},a.\u0275cmp=r.Ob({type:a,selectors:[["uxd-components-facet-typeahead-list"]],features:[r.zb],decls:155,vars:9,consts:[[1,"row"],[1,"col-md-12"],["header","Authors",3,"typeaheadConfig","facets","query","suggestions","simplified","queryChange"],["tableTitle","Inputs"],["uxd-api-property","","name","facets","type","Facet[] | Observable<Facet[]>"],["uxd-api-property","","name","selected","type","Facet[]"],["uxd-api-property","","name","header","type","string"],["uxd-api-property","","name","suggestions","type","Facet[]"],["uxd-api-property","","name","simplified","type","boolean","defaultValue","false"],["uxd-api-property","","name","typeaheadConfig","type","FacetTypeaheadListConfig"],["uxd-api-property","","name","expanded","type","boolean","defaultValue","true"],["uxd-api-property","","name","query","type","string"],["tableTitle","Outputs"],["uxd-api-property","","name","selectedChange","type","Facet[]"],["uxd-api-property","","name","queryChange","type","string"],["uxd-api-property","","name","events","type","FacetEvent"],[3,"minimal"],["heading","HTML"],["language","html",3,"content"],["heading","TypeScript"],["language","javascript",3,"content"]],template:function(n,a){1&n&&(r.ac(0,"div",0),r.Sc(1,"\n    "),r.ac(2,"div",1),r.Sc(3,"\n        "),r.ac(4,"ux-facet-container"),r.Sc(5,"\n            "),r.ac(6,"ux-facet-typeahead-list",2),r.ic("queryChange",(function(n){return a.query=n})),r.Sc(7,"\n            "),r.Zb(),r.Sc(8,"\n        "),r.Zb(),r.Sc(9,"\n    "),r.Zb(),r.Sc(10,"\n"),r.Zb(),r.Sc(11,"\n\n"),r.Vb(12,"hr"),r.Sc(13,"\n\n"),r.ac(14,"p"),r.Sc(15,"\n    The Facet Typeahead List component can be used to select and deselect facets to provide the user with filtering capabilities.\n    The Facet Typeahead List component is particularly useful when there can be a large number of facets that can be selected\n    and allows users to find the appropriate facet by searching using a typeahead control.\n"),r.Zb(),r.Sc(16,"\n\n"),r.ac(17,"p"),r.Sc(18,"\n    The typeahead can support an array of facets to filter or if there is a significant amount of data, an observable can be\n    used to fetch data from the server when the user performs a search.\n"),r.Zb(),r.Sc(19,"\n\n"),r.ac(20,"p"),r.Sc(21,"\n    To add a Facet Typeahead List component to your application you need to import the "),r.ac(22,"code"),r.Sc(23,"FacetsModule"),r.Zb(),r.Sc(24," which allows\n    the use of the "),r.ac(25,"code"),r.Sc(26,"ux-facet-typeahead-list"),r.Zb(),r.Sc(27," component.\n"),r.Zb(),r.Sc(28,"\n\n"),r.ac(29,"p"),r.Sc(30,"\n    A list of suggested facets can be displayed above the typeahead to allow a user to quickly select some options without having to perform a search.\n"),r.Zb(),r.Sc(31,"\n\n"),r.ac(32,"p"),r.Sc(33,"The following attributes can be used to customize the behavior of the component:"),r.Zb(),r.Sc(34,"\n\n"),r.ac(35,"uxd-api-properties",3),r.Sc(36,"\n    "),r.ac(37,"tr",4),r.Sc(38,"\n        Defines the complete list of facets that can be selected. Alternatively an observable can be used to allow values to be fetched\n        dynamically.\n    "),r.Zb(),r.Sc(39,"\n    "),r.ac(40,"tr",5),r.Sc(41,"\n        This will allow you to define an initial set of selected facets.\n    "),r.Zb(),r.Sc(42,"\n    "),r.ac(43,"tr",6),r.Sc(44,"\n        Defines the text displayed at the top of the Facet Typeahead List.\n    "),r.Zb(),r.Sc(45,"\n    "),r.ac(46,"tr",7),r.Sc(47,"\n        Defines a list of facets which will be displayed above the typeahead to allow the user to quickly select some facets.\n    "),r.Zb(),r.Sc(48,"\n    "),r.ac(49,"tr",8),r.Sc(50,"\n        Defines whether or not the checkboxes displayed alongside suggestions will appear in simplified form.\n    "),r.Zb(),r.Sc(51,"\n    "),r.ac(52,"tr",9),r.Sc(53,"\n        Allows configuration of the typeahead control. The possible values are:\n        "),r.ac(54,"ul"),r.Sc(55,"\n            "),r.ac(56,"li"),r.ac(57,"code"),r.Sc(58,"placeholder"),r.Zb(),r.Sc(59," - "),r.ac(60,"b"),r.Sc(61,"string"),r.Zb(),r.Sc(62," - Sets the placeholder of the typeahead."),r.Zb(),r.Sc(63,"\n            "),r.ac(64,"li"),r.ac(65,"code"),r.Sc(66,"minCharacters"),r.Zb(),r.Sc(67," - "),r.ac(68,"b"),r.Sc(69,"number"),r.Zb(),r.Sc(70," - Defines the minimum number of characters that are required before results will be shown. "),r.ac(71,"b"),r.Sc(72,"Default:"),r.Zb(),r.Sc(73," "),r.ac(74,"code"),r.Sc(75,"1"),r.Zb(),r.Sc(76,"."),r.Zb(),r.Sc(77,"\n            "),r.ac(78,"li"),r.ac(79,"code"),r.Sc(80,"maxResults"),r.Zb(),r.Sc(81," - "),r.ac(82,"b"),r.Sc(83,"number"),r.Zb(),r.Sc(84," - Sets the maximum number of results to display. "),r.ac(85,"b"),r.Sc(86,"Default:"),r.Zb(),r.Sc(87," "),r.ac(88,"code"),r.Sc(89,"50"),r.Zb(),r.Sc(90,"."),r.Zb(),r.Sc(91,"\n            "),r.ac(92,"li"),r.ac(93,"code"),r.Sc(94,"delay"),r.Zb(),r.Sc(95," - "),r.ac(96,"b"),r.Sc(97,"number"),r.Zb(),r.Sc(98," - Defines the number of milliseconds to wait before the results are filtered. "),r.ac(99,"b"),r.Sc(100,"Default: "),r.Zb(),r.Sc(101," "),r.ac(102,"code"),r.Sc(103,"0"),r.Zb(),r.Sc(104,"."),r.Zb(),r.Sc(105,"\n        "),r.Zb(),r.Sc(106,"\n    "),r.Zb(),r.Sc(107,"\n    "),r.ac(108,"tr",10),r.Sc(109,"\n        Defines whether or not the Facet Typeahead List should be initially expanded or not.\n    "),r.Zb(),r.Sc(110,"\n    "),r.ac(111,"tr",11),r.Sc(112,"\n        Defines the query displayed in the input field.\n    "),r.Zb(),r.Sc(113,"\n"),r.Zb(),r.Sc(114,"\n\n"),r.ac(115,"uxd-api-properties",12),r.Sc(116,"\n    "),r.ac(117,"tr",13),r.Sc(118,"\n        If two-way binding is used this array will get updated any time the selected facets change.\n    "),r.Zb(),r.Sc(119,"\n    "),r.ac(120,"tr",14),r.Sc(121,"\n        Emits the current query when the value of the input field changes.\n    "),r.Zb(),r.Sc(122,"\n    "),r.ac(123,"tr",15),r.Sc(124,"\n        This will be triggered when a facet is selected, deselected or all facets are deselected. The event will be an instance of\n        either "),r.ac(125,"code"),r.Sc(126,"FacetSelect"),r.Zb(),r.Sc(127,", "),r.ac(128,"code"),r.Sc(129,"FacetDeselect"),r.Zb(),r.Sc(130," or "),r.ac(131,"code"),r.Sc(132,"FacetDeselectAll"),r.Zb(),r.Sc(133,"\n        and will contain the facet being selected or deselected in a "),r.ac(134,"code"),r.Sc(135,"facet"),r.Zb(),r.Sc(136," property (deselect all will\n        not contain affected facets).\n    "),r.Zb(),r.Sc(137,"\n"),r.Zb(),r.Sc(138,"\n\n"),r.ac(139,"p"),r.Sc(140,"The following code will produce the example shown above:"),r.Zb(),r.Sc(141,"\n\n"),r.ac(142,"ux-tabset",16),r.Sc(143,"\n\n    "),r.ac(144,"ux-tab",17),r.Sc(145,"\n        "),r.Vb(146,"uxd-snippet",18),r.Sc(147,"\n    "),r.Zb(),r.Sc(148,"\n\n    "),r.ac(149,"ux-tab",19),r.Sc(150,"\n        "),r.Vb(151,"uxd-snippet",20),r.Sc(152,"\n    "),r.Zb(),r.Sc(153,"\n\n"),r.Zb(),r.Sc(154,"\n")),2&n&&(r.Cb(6),r.tc("typeaheadConfig",r.vc(8,_))("facets",a.facets)("query",a.query)("suggestions",a.suggestions)("simplified",!1),r.Cb(136),r.tc("minimal",!1),r.Cb(4),r.tc("content",a.snippets.compiled.appHtml),r.Cb(5),r.tc("content",a.snippets.compiled.appTs))},directives:[p.U,p.Z,k.a,d.a,p.Kd,p.Fd,f.a],encapsulation:2}),a=function(n,a,s,t){var e,p=arguments.length,c=p<3?a:null===t?t=Object.getOwnPropertyDescriptor(a,s):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(n,a,s,t);else for(var o=n.length-1;o>=0;o--)(e=n[o])&&(c=(p<3?e(c):p>3?e(a,s,c):e(a,s))||c);return p>3&&c&&Object.defineProperty(a,s,c),c}([Object(i.a)("ComponentsFacetTypeaheadListComponent")],a)}(u.a);s.d(a,"ComponentsFacetsModule",(function(){return U}));var j=[O,Z,A,x,v],V=[{path:"**",component:o.a,data:{category:l.b.resolveCategoryData(l.a.Components,"Facets")}}],U=function(){function n(n,a){a.registerResolver(n,j)}return n.\u0275mod=r.Sb({type:n}),n.\u0275inj=r.Rb({factory:function(a){return new(a||n)(r.ec(r.j),r.ec(l.b))},imports:[[p.o,t.c,c.a,p.ab,e.i.forChild(V),p.Ld]]}),n}();("undefined"==typeof ngJitMode||ngJitMode)&&r.Mc(U,{declarations:[O,Z,A,x,v],imports:[p.o,t.c,c.a,p.ab,e.i,p.Ld],exports:[O,Z,A,x,v]})},SJPo:function(n,a){n.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Facet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'chance\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    selector<span class="token operator">:</span> <span class="token string">\'app\'</span><span class="token punctuation">,</span>\n    templateUrl<span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n\n    facets<span class="token operator">:</span> Facet<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    allowReorder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n    <span class="token function">addFacet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// create a new random facet</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>facets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Facet</span><span class="token punctuation">(</span>chance<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> chance<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> min<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',example:"import { Component } from '@angular/core';\nimport { Facet } from '@ux-aspects/ux-aspects';\nimport 'chance';\n\n@Component({\n    selector: 'app',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n\n    facets: Facet[] = [];\n    allowReorder = false;\n\n    addFacet() {\n\n        // create a new random facet\n        this.facets.push(new Facet(chance.name(), {}, chance.integer({ min: 0, max: 100 })));\n    }\n}"}},TUfE:function(n,a){n.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-facet-container</span> <span class="token attr-name">[(facets)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>facets<span class="token punctuation">"</span></span> <span class="token attr-name">[facetsReorderable]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allowReorder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-facet-container</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn button-primary<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addFacet()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add Facet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-t-md<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-checkbox</span> <span class="token attr-name">[(value)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allowReorder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Allow reordering<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-checkbox</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<div class="row">\n    <div class="col-md-12">\n        <ux-facet-container [(facets)]="facets" [facetsReorderable]="allowReorder"></ux-facet-container>\n        <hr>\n        <button class="btn button-primary" (click)="addFacet()">Add Facet</button>\n        <div class="m-t-md">\n            <ux-checkbox [(value)]="allowReorder">Allow reordering</ux-checkbox>\n        </div>\n    </div>\n</div>'}},V926:function(n,a){n.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Facet<span class="token punctuation">,</span> FacetEvent<span class="token punctuation">,</span> FacetSelect<span class="token punctuation">,</span> FacetDeselect<span class="token punctuation">,</span> FacetDeselectAll <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'chance\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    selector<span class="token operator">:</span> <span class="token string">\'app\'</span><span class="token punctuation">,</span>\n    templateUrl<span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n\n    facets<span class="token operator">:</span> Facet<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    event<span class="token operator">:</span> string<span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// generate some facets</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>facets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Facet</span><span class="token punctuation">(</span>chance<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> chance<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> min<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// sort the users alphabetically</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>facets<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">facetOne<span class="token punctuation">,</span> facetTwo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>facetOne<span class="token punctuation">.</span>title <span class="token operator">&lt;</span> facetTwo<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> \n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>facetOne<span class="token punctuation">.</span>title <span class="token operator">></span> facetTwo<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> FacetEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">FacetSelect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>event <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> event<span class="token punctuation">.</span>facet<span class="token punctuation">.</span>title <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> was selected!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">FacetDeselect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>event <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> event<span class="token punctuation">.</span>facet<span class="token punctuation">.</span>title <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> was deselected!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">FacetDeselectAll</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>event <span class="token operator">=</span> <span class="token string">\'All facets were deselected!\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',example:"import { Component } from '@angular/core';\nimport { Facet, FacetEvent, FacetSelect, FacetDeselect, FacetDeselectAll } from '@ux-aspects/ux-aspects';\nimport 'chance';\n\n@Component({\n    selector: 'app',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n\n    facets: Facet[] = [];\n    event: string;\n\n    constructor() {\n\n        // generate some facets\n        for (let idx = 0; idx < 30; idx++) {\n            this.facets.push(new Facet(chance.name(), null, chance.integer({ min: 0, max: 100})));\n        }\n\n        // sort the users alphabetically\n        this.facets.sort((facetOne, facetTwo) => {\n            if (facetOne.title < facetTwo.title) {\n                return -1;\n            } \n\n            if (facetOne.title > facetTwo.title) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    onEvent(event: FacetEvent) {\n\n        if (event instanceof FacetSelect) {\n            this.event = `${ event.facet.title } was selected!`;\n        }\n\n        if (event instanceof FacetDeselect) {\n            this.event = `${ event.facet.title } was deselected!`;\n        }\n\n        if (event instanceof FacetDeselectAll) {\n            this.event = 'All facets were deselected!';\n        }\n\n    }\n}"}},aOGQ:function(n,a){n.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-facet-container</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-facet-typeahead-list</span>\n                <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Authors<span class="token punctuation">"</span></span>\n                <span class="token attr-name">[facets]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>facets<span class="token punctuation">"</span></span>\n                <span class="token attr-name">[(query)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span>\n                <span class="token attr-name">[suggestions]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suggestions<span class="token punctuation">"</span></span>\n                <span class="token attr-name">[simplified]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>\n                <span class="token attr-name">[typeaheadConfig]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ placeholder: \'Find Author\' }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-facet-typeahead-list</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-facet-container</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<div class="row">\n    <div class="col-md-12">\n        <ux-facet-container>\n            <ux-facet-typeahead-list\n                header="Authors"\n                [facets]="facets"\n                [(query)]="query"\n                [suggestions]="suggestions"\n                [simplified]="false"\n                [typeaheadConfig]="{ placeholder: \'Find Author\' }">\n            </ux-facet-typeahead-list>\n        </ux-facet-container>\n    </div>\n</div>'}},dSNF:function(n,a){n.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-facet-container</span> <span class="token attr-name">(events)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEvent($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-facet-check-list</span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Authors<span class="token punctuation">"</span></span> <span class="token attr-name">[facets]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>facets<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-facet-check-list</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-facet-container</span><span class="token punctuation">></span></span>\n\n        <span class="token comment">&lt;!-- If there has been an event show some information --\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>event<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ event }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<div class="row">\n    <div class="col-md-12">\n        <ux-facet-container (events)="onEvent($event)">\n            <ux-facet-check-list header="Authors" [facets]="facets"></ux-facet-check-list>\n        </ux-facet-container>\n\n        \x3c!-- If there has been an event show some information --\x3e\n        <div *ngIf="event">\n            <hr>\n            <p>{{ event }}</p>\n        </div>\n\n    </div>\n</div>'}},kN9H:function(n,a){n.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnDestroy<span class="token punctuation">,</span> OnInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Facet<span class="token punctuation">,</span> FacetDeselect<span class="token punctuation">,</span> FacetDeselectAll<span class="token punctuation">,</span> FacetService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> filter<span class="token punctuation">,</span> takeUntil <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'rxjs/operators\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Subject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'rxjs\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    selector<span class="token operator">:</span> <span class="token string">\'my-custom-facet-component\'</span><span class="token punctuation">,</span>\n    templateUrl<span class="token operator">:</span> <span class="token string">\'./facet-component.component.html\'</span><span class="token punctuation">,</span>\n    styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./facet-component.component.css\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SampleCustomFacetComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span><span class="token punctuation">,</span> OnDestroy <span class="token punctuation">{</span>\n\n    expanded<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n    facets<span class="token operator">:</span> Facet<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">Facet</span><span class="token punctuation">(</span><span class="token string">\'Components\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> checked<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">Facet</span><span class="token punctuation">(</span><span class="token string">\'Charts\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> checked<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">Facet</span><span class="token punctuation">(</span><span class="token string">\'CSS\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> checked<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> _onDestroy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> _facetService<span class="token operator">:</span> FacetService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\n    <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// if a facet is deselected externally we need to update checkbox state</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_facetService<span class="token punctuation">.</span>events$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>\n            <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> event <span class="token keyword">instanceof</span> <span class="token class-name">FacetDeselect</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onDestroy<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> FacetDeselect</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            event<span class="token punctuation">.</span>facet<span class="token punctuation">.</span>data<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// if all facets are deselected externally we need to update checkbox states</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_facetService<span class="token punctuation">.</span>events$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>\n            <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> event <span class="token keyword">instanceof</span> <span class="token class-name">FacetDeselectAll</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onDestroy<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>facets<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">facet</span> <span class="token operator">=></span> facet<span class="token punctuation">.</span>data<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">ngOnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_onDestroy<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_onDestroy<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">updateFacet</span><span class="token punctuation">(</span>facet<span class="token operator">:</span> Facet<span class="token punctuation">,</span> selected<span class="token operator">:</span> boolean<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// update the checked value</span>\n        facet<span class="token punctuation">.</span>data<span class="token punctuation">.</span>checked <span class="token operator">=</span> selected<span class="token punctuation">;</span>\n\n        <span class="token comment">// if the selected state is true and the facet isnt currently selected then select it</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>selected <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_facetService<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span>facet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>_facetService<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>facet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// if the selected state is false and the facet is current selected then deselect it</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>selected <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_facetService<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span>facet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>_facetService<span class="token punctuation">.</span><span class="token function">deselect</span><span class="token punctuation">(</span>facet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',example:"import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Facet, FacetDeselect, FacetDeselectAll, FacetService } from '@ux-aspects/ux-aspects';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'my-custom-facet-component',\n    templateUrl: './facet-component.component.html',\n    styleUrls: ['./facet-component.component.css']\n})\nexport class SampleCustomFacetComponent implements OnInit, OnDestroy {\n\n    expanded: boolean = true;\n\n    facets: Facet[] = [\n        new Facet('Components', { checked: false }),\n        new Facet('Charts', { checked: false }),\n        new Facet('CSS', { checked: false })\n    ];\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _facetService: FacetService) { }\n\n    ngOnInit(): void {\n\n        // if a facet is deselected externally we need to update checkbox state\n        this._facetService.events$.pipe(\n            filter(event => event instanceof FacetDeselect),\n            takeUntil(this._onDestroy)\n        ).subscribe((event: FacetDeselect) => {\n            event.facet.data.checked = false;\n        });\n\n        // if all facets are deselected externally we need to update checkbox states\n        this._facetService.events$.pipe(\n            filter(event => event instanceof FacetDeselectAll),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => {\n            this.facets.forEach(facet => facet.data.checked = false);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateFacet(facet: Facet, selected: boolean): void {\n\n        // update the checked value\n        facet.data.checked = selected;\n\n        // if the selected state is true and the facet isnt currently selected then select it\n        if (selected === true && !this._facetService.isSelected(facet)) {\n            this._facetService.select(facet);\n        }\n\n        // if the selected state is false and the facet is current selected then deselect it\n        if (selected === false && this._facetService.isSelected(facet)) {\n            this._facetService.deselect(facet);\n        }\n    }\n}"}},pWfX:function(n,a){n.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-facet-header</span> <span class="token attr-name">header</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Category<span class="token punctuation">"</span></span> <span class="token attr-name">[(expanded)]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expanded<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-facet-header</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expanded<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sample-facet-checkbox-container checkbox-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-checkbox</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sample-facet-checkbox<span class="token punctuation">"</span></span>\n        <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let facet of facets<span class="token punctuation">"</span></span>\n        <span class="token attr-name">[value]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>facet.data.checked<span class="token punctuation">"</span></span>\n        <span class="token attr-name">(valueChange)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateFacet(facet, $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        {{ facet.title }}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-checkbox</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<ux-facet-header header="Category" [(expanded)]="expanded"></ux-facet-header>\n\n<div *ngIf="expanded" class="sample-facet-checkbox-container checkbox-container">\n    <ux-checkbox class="sample-facet-checkbox"\n        *ngFor="let facet of facets"\n        [value]="facet.data.checked"\n        (valueChange)="updateFacet(facet, $event)">\n        {{ facet.title }}\n    </ux-checkbox>\n</div>'}}}]);